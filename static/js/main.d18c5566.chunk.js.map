{"version":3,"sources":["components/FormNote/FormNote.js","components/Note/Note.js","components/Notes/Notes.js","App.js","reportWebVitals.js","index.js"],"names":["FormNote","closeForm","addNewNote","noteToEdit","useState","subject","content","id","note","setNote","isValid","setIsValid","useEffect","closeFormNote","handleChange","e","name","target","value","className","type","onClick","onSubmit","preventDefault","htmlFor","autoComplete","onChange","cols","rows","Note","deleteNote","getNoteToEdit","Notes","myNotes","map","index","defaultState","isOpenForm","isEditting","store","thing","localStorage","setItem","JSON","stringify","reducer","state","action","newList","parse","getItem","payload","i","forEach","item","splice","Date","getTime","toString","noteEdit","filter","Error","App","useReducer","dispatch","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d18c5566.chunk.js","sourcesContent":["import './FormNote.css'\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nconst FormNote = ({closeForm, addNewNote, noteToEdit}) => {\r\n    const [note, setNote] = useState({subject: \"\", content: \"\", id:\"\"})\r\n    const [isValid, setIsValid] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if(noteToEdit){\r\n            setNote(noteToEdit);\r\n        }\r\n    }, [])\r\n\r\n    const closeFormNote = () => {\r\n        closeForm();\r\n    }\r\n\r\n    const handleChange = (e) =>{\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n        setNote({...note, [name]: value})\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        const {subject, content} = note;\r\n        if(subject === \"\" && content === \"\"){\r\n            setIsValid(3);\r\n        }\r\n        else if(subject === \"\"){\r\n            setIsValid(1);\r\n        }\r\n        else if(content === \"\"){\r\n            setIsValid(2);\r\n        }\r\n        else{\r\n            \r\n            addNewNote({...note, id: noteToEdit ? noteToEdit.id : \"\"});\r\n            closeFormNote();\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"form-note-container\">\r\n            <div className=\"form-note\">\r\n                <h3>Note</h3>\r\n                <button \r\n                    type=\"button\" \r\n                    className=\"close-form\"\r\n                    onClick={closeFormNote}\r\n                >\r\n                    Ã—\r\n                </button>\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"form-control\">\r\n                        <label htmlFor=\"subject\">Subject</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            name=\"subject\" \r\n                            autoComplete=\"off\"\r\n                            value={note.subject}\r\n                            onChange={handleChange}\r\n                        />\r\n                        {isValid === 1 || isValid === 3 ? <p className=\"invalid-form\">Subject can not be empty</p> : \"\"}\r\n                    </div>\r\n                    <div className=\"form-control\">\r\n                        <label htmlFor=\"content\">Content</label>\r\n                        <textarea \r\n                            name=\"content\" \r\n                            id=\"note-content\" \r\n                            cols={25} rows={7}\r\n                            value={note.content}\r\n                            onChange={handleChange}\r\n                        />\r\n                        {isValid === 2 || isValid === 3 ? <p className=\"invalid-form\">Content can not be empty</p> : \"\"}\r\n                    </div>\r\n                    <button type=\"submit\">OK</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormNote\r\n","import React from 'react'\r\nimport './Note.css'\r\nconst Note = ({subject, content, id, deleteNote, getNoteToEdit}) => {\r\n   \r\n    return (\r\n        <div className=\"note\">\r\n            <div className=\"navbar\">\r\n                <h4>{subject}</h4>\r\n                <div className=\"button-group\">\r\n                    <button \r\n                        className=\"edit-note\"\r\n                        onClick={() => {\r\n                            getNoteToEdit(id);\r\n                        }}\r\n                    >\r\n                        <i className=\"fas fa-edit\" />\r\n                    </button>\r\n                    <button \r\n                        className=\"delete-note\" \r\n                        onClick={() => {\r\n                            deleteNote(id);\r\n                        }}\r\n                    >\r\n                        <i className=\"fas fa-trash-alt\" />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"note-content\">\r\n                <p>\r\n                    {content}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Note\r\n","import React from 'react'\r\nimport Note from '../Note/Note'\r\nimport './Notes.css'\r\n\r\nconst Notes = ({myNotes, addNewNote, deleteNote, getNoteToEdit}) => {\r\n    \r\n    return (\r\n        <div className=\"notes\">\r\n            {\r\n                myNotes.map((note, index) => {\r\n                    return <Note\r\n                        key={note.id}\r\n                        {...note}\r\n                        deleteNote={deleteNote}\r\n                        getNoteToEdit={getNoteToEdit}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notes\r\n","import './App.css';\nimport React, { useState, useEffect, useReducer  } from 'react';\nimport FormNote from './components/FormNote/FormNote'\nimport Notes from './components/Notes/Notes'\nimport Note from './components/Note/Note';\n\nconst defaultState = {\n\tmyNotes: [],\n\tisOpenForm: false,\n\tisEditting: false,\n\tnoteToEdit: null,\n}\n\n// function App() {\n\n// \tconst [isOpenForm, setIsOpenForm] = useState(false)\n// \tconst [myNotes, setMyNotes] = useState([])\n// \tconst [isEditting, setIsEditting] = useState(false);\n// \tconst [noteToEdit, setNoteToEdit] = useState(null);\n\n\n\n// \tconst openForm = () =>{\n// \t\tsetIsOpenForm(true);\n// \t}\n\n// \tconst closeForm = () =>{\n// \t\tsetIsOpenForm(false);\n// \t}\n\n// \tconst addNewNote = (note) =>{\n// \t\tif(note){\n\t\t\t\n// \t\t\tif(note.id){\n// \t\t\t\tlet temp = myNotes;\n// \t\t\t\tlet i = -1;\n// \t\t\t\ttemp.forEach((item, index) => {\n// \t\t\t\t\tif(item.id === note.id){\n// \t\t\t\t\t\ti = index;\n// \t\t\t\t\t}\n// \t\t\t\t})\n// \t\t\t\ttemp.splice(i, 1, note)\n// \t\t\t\tstore(temp);\n// \t\t\t\tsetMyNotes(temp);\n// \t\t\t}\n// \t\t\telse{\n\t\t\t\t\n// \t\t\t\tnote.id = new Date().getTime().toString();\n// \t\t\t\tstore([...myNotes, note]);\n// \t\t\t\tsetMyNotes([...myNotes, note]);\n// \t\t\t}\n\t\t\n// \t\t}\n// \t}\n\n// \tconst deleteNote = (id) =>{\n// \t\tif(id){\n// \t\t\tstore(myNotes.filter((note) => note.id !== id))\n// \t\t\tsetMyNotes(myNotes.filter((note) => note.id !== id));\n\t\t\t\n// \t\t}\n// \t}\n\n// \tconst getNoteToEdit = (id) =>{\n// \t\tif(id){\n// \t\t\tlet noteEdit;\n// \t\t\tmyNotes.forEach((note)=>{\n// \t\t\t\tif(note.id === id){\n// \t\t\t\t\tnoteEdit = note;\n// \t\t\t\t}\n// \t\t\t})\n// \t\t\tsetIsOpenForm(true)\n// \t\t\tsetIsEditting(true);\n// \t\t\tsetNoteToEdit(noteEdit);\n\t\t\t\n// \t\t}\n// \t}\n\n// \tconst store = (thing) =>{\n// \t\tlocalStorage.setItem('notes',  JSON.stringify(thing));\n// \t}\n\n// \tuseEffect(() => {\n// \t\tconst notes = JSON.parse(localStorage.getItem('notes'));\n// \t\tconsole.log(notes);\n// \t\tsetMyNotes(notes)\n\t\t\n// \t}, [])\n\n// \treturn (\n// \t\t<div className=\"App\">\n// \t\t\t<div className=\"container\">\n// \t\t\t\t<div className=\"header\">\n// \t\t\t\t\t<h1>\n// \t\t\t\t\t\tMy Notes\n//          \t\t\t </h1>\n// \t\t\t\t\t<button className=\"new-note\" onClick={openForm}>+</button>\n// \t\t\t\t</div>\n\t\t\t\t\n// \t\t\t\t<Notes \n// \t\t\t\t\tmyNotes={myNotes}\n// \t\t\t\t\taddNewNote={addNewNote}\n// \t\t\t\t\tdeleteNote={deleteNote}\n// \t\t\t\t\tgetNoteToEdit={getNoteToEdit}\n// \t\t\t\t></Notes>\n// \t\t\t\t{isOpenForm && \n// \t\t\t\t\t<FormNote\n// \t\t\t\t\t\taddNewNote={addNewNote}\n// \t\t\t\t\t\tcloseForm={closeForm}\n// \t\t\t\t\t\tnoteToEdit={isEditting ? noteToEdit : \"\"}\n// \t\t\t\t\t></FormNote>\n// \t\t\t\t}\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// }\n\n// export default App;\n\nconst store = (thing) =>{\n\tlocalStorage.setItem('notes',  JSON.stringify(thing));\n}\n\nconst reducer = (state, action) => {\n\tif(action.type === 'GET_DATA'){\n\t\tconst newList = JSON.parse(localStorage.getItem('notes'));\n\t\treturn{\n\t\t\t...state,\n\t\t\tmyNotes: newList,\n\t\t}\n\t}\n\tif (action.type === 'ADD_NOTE') {\n\t\tconst note = action.payload;\n\t\tif(note.id){\n\t\t\tlet newList = state.myNotes;\n\t\t\tlet i = -1;\n\t\t\tnewList.forEach((item, index) => {\n\t\t\t\tif(item.id === note.id){\n\t\t\t\t\ti = index;\n\t\t\t\t}\n\t\t\t})\n\t\t\tnewList.splice(i, 1, note)\n\t\t\tstore(newList);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmyNotes: newList,\n\t\t\t};\n\t\t}\n\t\telse{\n\t\t\tnote.id = new Date().getTime().toString();\n\t\t\tlet newList = [...state.myNotes, note];\n\t\t\tstore(newList);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmyNotes: newList,\n\t\t\t};\n\t\t}\n\t}\n\tif (action.type === 'EDIT_NOTE') {\n\t\tconst id = action.payload;\n\t\tlet noteEdit;\n\t\tstate.myNotes.forEach((note)=>{\n\t\t\tif(note.id === id){\n\t\t\t\tnoteEdit = note;\n\t\t\t}\n\t\t})\n\t\treturn { \n\t\t\t\t\t...state, \n\t\t\t\t\tisOpenForm: true, \n\t\t\t\t\tisEditting: true,\n\t\t\t\t\tnoteToEdit: noteEdit \n\t\t\t\t};\n\t}\n\tif (action.type === 'DELETE_NOTE') {\n\t\tconst id = action.payload;\n\t\tconst newList = state.myNotes.filter((note) => note.id !== id)\n\t\tstore(newList);\n\t\treturn { ...state, myNotes: newList,  };\n\t}\n\tif (action.type === 'OPEN_FORM') {\n\t\treturn { ...state, isOpenForm: true };\n\t}\n\tif(action.type === 'CLOSE_FORM'){\n\t\treturn { ...state, isOpenForm: false };\n\t}\n\tthrow new Error('no matching action type');\n};\n\n\nfunction App() {\n\n\tconst [state, dispatch] = useReducer(reducer, defaultState)\n\tconst openForm = () =>{\n\t\tdispatch({type: 'OPEN_FORM'});\n\t}\n\n\tconst closeForm = () =>{\n\t\tdispatch({type: 'CLOSE_FORM'});\n\t}\n\n\tconst addNewNote = (note) =>{\n\t\tif(note){\n\t\t\tdispatch({type: \"ADD_NOTE\", payload: note})\n\t\t}\n\t}\n\n\tconst deleteNote = (id) =>{\n\t\tif(id){\n\t\t\tdispatch({type:\"DELETE_NOTE\", payload: id});\n\t\t}\n\t}\n\n\tconst getNoteToEdit = (id) =>{\n\t\tif(id){\n\t\t\tdispatch({type: \"EDIT_NOTE\", payload: id});\n\t\t\t\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tdispatch({type: 'GET_DATA'})\n\t}, [])\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t<h1>\n\t\t\t\t\t\tMy Notes\n         \t\t\t </h1>\n\t\t\t\t\t<button className=\"new-note\" onClick={openForm}>+</button>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<Notes \n\t\t\t\t\tmyNotes={state.myNotes}\n\t\t\t\t\taddNewNote={addNewNote}\n\t\t\t\t\tdeleteNote={deleteNote}\n\t\t\t\t\tgetNoteToEdit={getNoteToEdit}\n\t\t\t\t></Notes>\n\t\t\t\t{state.isOpenForm && \n\t\t\t\t\t<FormNote\n\t\t\t\t\t\taddNewNote={addNewNote}\n\t\t\t\t\t\tcloseForm={closeForm}\n\t\t\t\t\t\tnoteToEdit={state.isEditting ? state.noteToEdit : \"\"}\n\t\t\t\t\t></FormNote>\n\t\t\t\t}\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}